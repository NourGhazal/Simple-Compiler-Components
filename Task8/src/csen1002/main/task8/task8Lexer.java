package csen1002.main.task8;// Generated from C:/Users/Dell/eclipse-workspace/task88/src\task8.g4 by ANTLR 4.10.1
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class task8Lexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		Q2=1, Q3=2, Q4=3;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"Q2", "Q3", "Q4", "ZERO", "ONE", "Q0", "Q1"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "Q2", "Q3", "Q4"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public task8Lexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "task8.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\u0003\u0099\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002"+
		"\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002"+
		"\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0004"+
		"\u0001\u0016\b\u0001\u000b\u0001\f\u0001\u0017\u0001\u0001\u0001\u0001"+
		"\u0005\u0001\u001c\b\u0001\n\u0001\f\u0001\u001f\t\u0001\u0001\u0001\u0001"+
		"\u0001\u0004\u0001#\b\u0001\u000b\u0001\f\u0001$\u0001\u0001\u0001\u0001"+
		"\u0005\u0001)\b\u0001\n\u0001\f\u0001,\t\u0001\u0003\u0001.\b\u0001\u0001"+
		"\u0002\u0001\u0002\u0004\u00022\b\u0002\u000b\u0002\f\u00023\u0001\u0002"+
		"\u0001\u0002\u0004\u00028\b\u0002\u000b\u0002\f\u00029\u0003\u0002<\b"+
		"\u0002\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0005\u0005"+
		"\u0005C\b\u0005\n\u0005\f\u0005F\t\u0005\u0001\u0005\u0001\u0005\u0004"+
		"\u0005J\b\u0005\u000b\u0005\f\u0005K\u0005\u0005N\b\u0005\n\u0005\f\u0005"+
		"Q\t\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0005\u0005X\b\u0005\n\u0005\f\u0005[\t\u0005\u0005\u0005]\b\u0005\n"+
		"\u0005\f\u0005`\t\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0004\u0005f\b\u0005\u000b\u0005\f\u0005g\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0005\u0005m\b\u0005\n\u0005\f\u0005p\t\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0004\u0005u\b\u0005\u000b\u0005\f\u0005v\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0005\u0005|\b\u0005\n\u0005\f\u0005\u007f\t"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0004\u0005\u0085"+
		"\b\u0005\u000b\u0005\f\u0005\u0086\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0005\u0005\u008c\b\u0005\n\u0005\f\u0005\u008f\t\u0005\u0001\u0005\u0005"+
		"\u0005\u0092\b\u0005\n\u0005\f\u0005\u0095\t\u0005\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0000\u0000\u0007\u0001\u0001\u0003\u0002\u0005\u0003\u0007"+
		"\u0000\t\u0000\u000b\u0000\r\u0000\u0001\u0000\u0000\u00a8\u0000\u0001"+
		"\u0001\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0005"+
		"\u0001\u0000\u0000\u0000\u0001\u000f\u0001\u0000\u0000\u0000\u0003-\u0001"+
		"\u0000\u0000\u0000\u0005;\u0001\u0000\u0000\u0000\u0007=\u0001\u0000\u0000"+
		"\u0000\t?\u0001\u0000\u0000\u0000\u000bD\u0001\u0000\u0000\u0000\r\u0096"+
		"\u0001\u0000\u0000\u0000\u000f\u0010\u0003\r\u0006\u0000\u0010\u0011\u0003"+
		"\u0007\u0003\u0000\u0011\u0002\u0001\u0000\u0000\u0000\u0012\u0013\u0003"+
		"\u0001\u0000\u0000\u0013\u001d\u0003\u0007\u0003\u0000\u0014\u0016\u0003"+
		"\t\u0004\u0000\u0015\u0014\u0001\u0000\u0000\u0000\u0016\u0017\u0001\u0000"+
		"\u0000\u0000\u0017\u0015\u0001\u0000\u0000\u0000\u0017\u0018\u0001\u0000"+
		"\u0000\u0000\u0018\u0019\u0001\u0000\u0000\u0000\u0019\u001a\u0003\u0007"+
		"\u0003\u0000\u001a\u001c\u0001\u0000\u0000\u0000\u001b\u0015\u0001\u0000"+
		"\u0000\u0000\u001c\u001f\u0001\u0000\u0000\u0000\u001d\u001b\u0001\u0000"+
		"\u0000\u0000\u001d\u001e\u0001\u0000\u0000\u0000\u001e.\u0001\u0000\u0000"+
		"\u0000\u001f\u001d\u0001\u0000\u0000\u0000 *\u0003\u0001\u0000\u0000!"+
		"#\u0003\t\u0004\u0000\"!\u0001\u0000\u0000\u0000#$\u0001\u0000\u0000\u0000"+
		"$\"\u0001\u0000\u0000\u0000$%\u0001\u0000\u0000\u0000%&\u0001\u0000\u0000"+
		"\u0000&\'\u0003\u0007\u0003\u0000\')\u0001\u0000\u0000\u0000(\"\u0001"+
		"\u0000\u0000\u0000),\u0001\u0000\u0000\u0000*(\u0001\u0000\u0000\u0000"+
		"*+\u0001\u0000\u0000\u0000+.\u0001\u0000\u0000\u0000,*\u0001\u0000\u0000"+
		"\u0000-\u0012\u0001\u0000\u0000\u0000- \u0001\u0000\u0000\u0000.\u0004"+
		"\u0001\u0000\u0000\u0000/1\u0003\u0001\u0000\u000002\u0003\t\u0004\u0000"+
		"10\u0001\u0000\u0000\u000023\u0001\u0000\u0000\u000031\u0001\u0000\u0000"+
		"\u000034\u0001\u0000\u0000\u00004<\u0001\u0000\u0000\u000057\u0003\u0003"+
		"\u0001\u000068\u0003\t\u0004\u000076\u0001\u0000\u0000\u000089\u0001\u0000"+
		"\u0000\u000097\u0001\u0000\u0000\u00009:\u0001\u0000\u0000\u0000:<\u0001"+
		"\u0000\u0000\u0000;/\u0001\u0000\u0000\u0000;5\u0001\u0000\u0000\u0000"+
		"<\u0006\u0001\u0000\u0000\u0000=>\u00050\u0000\u0000>\b\u0001\u0000\u0000"+
		"\u0000?@\u00051\u0000\u0000@\n\u0001\u0000\u0000\u0000AC\u0003\t\u0004"+
		"\u0000BA\u0001\u0000\u0000\u0000CF\u0001\u0000\u0000\u0000DB\u0001\u0000"+
		"\u0000\u0000DE\u0001\u0000\u0000\u0000EO\u0001\u0000\u0000\u0000FD\u0001"+
		"\u0000\u0000\u0000GI\u0003\u0007\u0003\u0000HJ\u0003\t\u0004\u0000IH\u0001"+
		"\u0000\u0000\u0000JK\u0001\u0000\u0000\u0000KI\u0001\u0000\u0000\u0000"+
		"KL\u0001\u0000\u0000\u0000LN\u0001\u0000\u0000\u0000MG\u0001\u0000\u0000"+
		"\u0000NQ\u0001\u0000\u0000\u0000OM\u0001\u0000\u0000\u0000OP\u0001\u0000"+
		"\u0000\u0000P^\u0001\u0000\u0000\u0000QO\u0001\u0000\u0000\u0000RS\u0003"+
		"\u0007\u0003\u0000ST\u0003\u0007\u0003\u0000TU\u0003\u0007\u0003\u0000"+
		"UY\u0003\u0007\u0003\u0000VX\u0003\t\u0004\u0000WV\u0001\u0000\u0000\u0000"+
		"X[\u0001\u0000\u0000\u0000YW\u0001\u0000\u0000\u0000YZ\u0001\u0000\u0000"+
		"\u0000Z]\u0001\u0000\u0000\u0000[Y\u0001\u0000\u0000\u0000\\R\u0001\u0000"+
		"\u0000\u0000]`\u0001\u0000\u0000\u0000^\\\u0001\u0000\u0000\u0000^_\u0001"+
		"\u0000\u0000\u0000_n\u0001\u0000\u0000\u0000`^\u0001\u0000\u0000\u0000"+
		"ab\u0003\u0007\u0003\u0000bc\u0003\u0007\u0003\u0000ce\u0003\u0007\u0003"+
		"\u0000df\u0003\t\u0004\u0000ed\u0001\u0000\u0000\u0000fg\u0001\u0000\u0000"+
		"\u0000ge\u0001\u0000\u0000\u0000gh\u0001\u0000\u0000\u0000hi\u0001\u0000"+
		"\u0000\u0000ij\u0003\u0007\u0003\u0000jk\u0003\u0007\u0003\u0000km\u0001"+
		"\u0000\u0000\u0000la\u0001\u0000\u0000\u0000mp\u0001\u0000\u0000\u0000"+
		"nl\u0001\u0000\u0000\u0000no\u0001\u0000\u0000\u0000o}\u0001\u0000\u0000"+
		"\u0000pn\u0001\u0000\u0000\u0000qr\u0003\u0007\u0003\u0000rt\u0003\u0007"+
		"\u0003\u0000su\u0003\t\u0004\u0000ts\u0001\u0000\u0000\u0000uv\u0001\u0000"+
		"\u0000\u0000vt\u0001\u0000\u0000\u0000vw\u0001\u0000\u0000\u0000wx\u0001"+
		"\u0000\u0000\u0000xy\u0003\u0007\u0003\u0000yz\u0003\u0007\u0003\u0000"+
		"z|\u0001\u0000\u0000\u0000{q\u0001\u0000\u0000\u0000|\u007f\u0001\u0000"+
		"\u0000\u0000}{\u0001\u0000\u0000\u0000}~\u0001\u0000\u0000\u0000~\u008d"+
		"\u0001\u0000\u0000\u0000\u007f}\u0001\u0000\u0000\u0000\u0080\u0081\u0003"+
		"\u0007\u0003\u0000\u0081\u0082\u0003\u0007\u0003\u0000\u0082\u0084\u0003"+
		"\u0007\u0003\u0000\u0083\u0085\u0003\t\u0004\u0000\u0084\u0083\u0001\u0000"+
		"\u0000\u0000\u0085\u0086\u0001\u0000\u0000\u0000\u0086\u0084\u0001\u0000"+
		"\u0000\u0000\u0086\u0087\u0001\u0000\u0000\u0000\u0087\u0088\u0001\u0000"+
		"\u0000\u0000\u0088\u0089\u0003\u0007\u0003\u0000\u0089\u008a\u0003\u0007"+
		"\u0003\u0000\u008a\u008c\u0001\u0000\u0000\u0000\u008b\u0080\u0001\u0000"+
		"\u0000\u0000\u008c\u008f\u0001\u0000\u0000\u0000\u008d\u008b\u0001\u0000"+
		"\u0000\u0000\u008d\u008e\u0001\u0000\u0000\u0000\u008e\u0093\u0001\u0000"+
		"\u0000\u0000\u008f\u008d\u0001\u0000\u0000\u0000\u0090\u0092\u0003\t\u0004"+
		"\u0000\u0091\u0090\u0001\u0000\u0000\u0000\u0092\u0095\u0001\u0000\u0000"+
		"\u0000\u0093\u0091\u0001\u0000\u0000\u0000\u0093\u0094\u0001\u0000\u0000"+
		"\u0000\u0094\f\u0001\u0000\u0000\u0000\u0095\u0093\u0001\u0000\u0000\u0000"+
		"\u0096\u0097\u0003\u000b\u0005\u0000\u0097\u0098\u0003\u0007\u0003\u0000"+
		"\u0098\u000e\u0001\u0000\u0000\u0000\u0015\u0000\u0017\u001d$*-39;DKO"+
		"Y^gnv}\u0086\u008d\u0093\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}